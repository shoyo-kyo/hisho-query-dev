@charset "utf-8";

@import "hisho-query/_hquery-0.1.1";


//--------------------------------
// hq-query-method
// hq-queryのmethod指定方法一覧
//--------------------------------
$str: "abcdefg.Hijklmn";

.method-setting{

	/* 通常 */
	method-normal: hq("str.length", $str);

	/* method-query指定（引数なし） */
	method-query : hq("str.reverse -> str.quote", $str);
	
	/* method-query指定（引数有り） */
	method-query : hq("str.split -> list.get -> str.quote", $str, ".", 1);
	
	/* method-map */
	method-map   : hq($str,(
		"str.replace": "abcd" "dcbb",
		"str.quote": null
	));

}

//--------------------------------
// hq("str.xxx",$str)
// string method
//--------------------------------
$str: "abcdefg.Hijklmn";

.hq-str{
	unquote   : hq("str.unquote", $str);
	quote     : hq("str.quote", $str);
	length    : hq("str.length", $str);
	insert    : hq("str.insert", $str, hoge, 3);
	index     : hq("str.index", $str, fg);
	slice     : hq("str.slice", $str, 1, 3);
	upperCase : hq("str.upcase", $str);
	lowerCase : hq("str.downcase", $str);
	capitalize: hq("str.capitalize", $str);
	FlUpcase  : hq("str.flUpcase", $str);
	FlDowncase: hq("str.flDowncase", $str);
	strip     : hq("str.strip", $str);
	succ      : hq("str.succ", $str);
	match     : hq("str.match", $str, "bc");
	replace   : hq("str.replace", $str, "bc", "xa");
	sprit     : hq("str.split", $str, ".");
	puts      : hq("str.puts", $str);
	getId     : hq("str.getId");
	reverse   : hq("str.reverse", $str);
	//help      : hq("str.help");
}

//--------------------------------
// hq("num.xxx",$num)
// number method
//--------------------------------
.hq-num{
	percentage : hq("num.percentage", (100px / 50px) );
	round      : hq("num.round", 10.4px);
	ceil       : hq("num.ceil", 10.4px);
	floor      : hq("num.floor", 10.4px);
	abs        : hq("num.abs", -15px);
	min        : hq("num.min", 10px, 5px, 2px, 15px, 18px);
	max        : hq("num.max", 10px, 5px, 2px, 15px, 18px);
	unit       : hq("num.unit", 20em);
	unitless   : hq("num.unitless", 20em);
	comparable : hq("num.comparable", 15em, 15px);
}

//--------------------------------
// hq("list.xxx",$list)
// list method
//--------------------------------
$list: a b c d ;
$list2: e f g h i j k;

.hq-list{
	get      : hq("list.get", $list, 1);
	set      : hq("list.set", $list, 3, "hoge");
	length   : hq("list.length", $list);
	index    : hq("list.index", $list, "b");
	push     : hq("list.push", $list, "x");
	unshift  : hq("list.unshift", $list, "x");
	pop      : hq("list.pop", $list);
	shift    : hq("list.shift", $list);
	slice    : hq("list.slice", $list, 2, 3);
	remove   : hq("list.remove", $list, c);
	join     : hq("list.join", $list, $list2, "comma");
	zip      : hq("list.zip", $list, $list2, $list);
	toSpace  : hq("list.toSpace", $list);
	toComma  : hq("list.toComma", $list);
	separator  : hq("list.separator", $list);
	reverse  : hq("list.reverse", $list);
	//help     : hq("list.help");
}

//--------------------------------
// hq("map.xxx",$map)
// map method
//--------------------------------
$map: (
	hoge: 2,
	fuga: e
);
$map2: (
	hoges: 20000,
	fugas: test
);


$mapd: (
	cat: (
		text: good,
		colorType: black
	),
	Lion: (
		text: bad,
		colorType: orange
	)
);

$mapd2: (
	Lion: (
		text: good,
		colorType: orange,
		option: (
			box: 2
		)
	),
	bird: (
		text: good,
		colorType: blue,
		option: (
			box: 1
		)
	)
);

.hq-map{
	get       : hq("map.get", $mapd, "cat.colorType");
	set       : hq("map.toString", hq("map.set", $mapd, "cat.colorType", "blue") );
	extend    : hq("map.toString", hq("map.extend", $mapd, $mapd2) );
	extend    : hq("map.toString", hq("map.extend", $mapd, $mapd2, true) ); //deepCopy
	merge     : hq("map.toString", hq("map.merge", $mapd, $mapd2) );
	mergeDeep : hq("map.toString", hq("map.mergeDeep", $mapd, $mapd2) );
	keys      : hq("map.keys", $map);
	values    : hq("map.values", $map);
	hasKey    : hq("map.hasKey", $map, "hoge");
	nth       : hq("map.nth", $map, 2);
	length    : hq("map.length", $mapd);
	push      : hq("map.toString", hq("map.push", $mapd, foo hoge) );
	join      : hq("map.join", $map, $map2, comma);
	zip       : hq("map.zip", $map, $map2);
	toString  : hq("map.toString", $mapd);
	help      : hq("map.help");
}

//--------------------------------
// hq("is.xxx",$str)
// is method
//--------------------------------
$gvalue: test;
.hq-is{
	$fuga: hogehoge;
	gValue   : hq("is.gValue", gvalue);
	function : hq("is.function", hq-is);
	mixin    : hq("is.mixin", hq);
	string   : hq("is.string", "border");
	number   : hq("is.number", 5px);
	color    : hq("is.color", #ff0000);
	map      : hq("is.map", $map);
	list     : hq("is.list", $list);
	bool     : hq("is.bool", true);
	//help     : hq("is.help");
}

//--------------------------------
// hq("css.xxx",$arg)
// css method
//--------------------------------
.hq-css{
	toMap     : hq("map.toString", hq("css.toMap", "margin", 0 2px 3px 4px) );
	toMap     : hq("map.toString", hq("css.toMap", "padding", 0 2px) );
	toMap     : hq("map.toString", hq("css.toMap", "border", solid 1px #ccc) );
	toMap     : hq("map.toString", hq("css.toMap", "outline", dotted) );
	toMap     : hq("map.toString", hq("css.toMap", "background", url(../img.jpg) #ccc 0 50%) );
	toMap     : hq("map.toString", hq("css.toMap", "font", 12px/1.5 bold) );
	toMap     : hq("map.toString", hq("css.toMap", "list-style", url(../img.jpg) outside square) );

	toShort   : hq("css.toShort", "margin", (
					top: 8px,
					right: 2px,
					bottom: 7px,
					left: 2px
				));
	
	toShort   : hq("css.toShort", "padding", (
					top: 8px,
					right: 2px,
					bottom: 8px,
					left: 2px
				));

	toShort   : hq("css.toShort", "border", (
					style: solid,
					width: 6px,
					color: #ccc
				));

	toShort   : hq("css.toShort", "border", (
					style: dotted,
					color: #ccc
				));

	toShort   : hq("css.toShort", "background", (
					image: url(../img/test.jpg),
					repeat: no-repeat,
					position: 0 0,
					color: #ccc
				));

	toShort   : hq("css.toShort", "font", (
					weight: bold,
					size: 12px,
					line-height: 1.5,
					family: "ＭＳ 明朝"
				));
	
	toShort   : hq("css.toShort", "list-style", (
					type:    square,
					image: url(../img/test.jpg),
					position: outside
				));

	getWidth  : hq("css.getWidth", 500px, solid 1px #ccc, 0 2px 3px 4px);
	getHeight : hq("css.getHeight", 500px, solid 1px #ccc, 0 2px 3px 4px);
	//help      : hq("css.help");
}

//--------------------------------
// @include hqm($arg...)
// hisho mixin
//--------------------------------

//compass
@import "compass/css3/";

//sprites
@import "test/*.png";
$spriteMap: $test-sprites;

/*hqm("module")*/
@include hqm("module",(
	name    : "PtHqmModule01",
	width   : 500px,
	align   : center,
	margin  : 0 0 20px,
	core: (
		background:red
	),
	li: (
		border:solid 1px #ccc
	)
));

.hqm-write{
	/*hqm("write")*/
	@include hqm("write",(
		background: #ccc,
		border: (
			style:solid,
			width:1px,
			color:#ccc,
		),
		margin: 0 0 20px 0
	));

	/*hqm(write.propaty)*/
	@include hqm("write.propaty", "padding", 10px);
}

.hqm-sprite {
	/*hqm("sprite")*/
	@include hqm("sprite",(
		spriteMap: $spriteMap,
		name: "dummy01:dummy01_hover",
		positionOnly: false,
		btn: true,
		hover: null
	));

	/*hqm("sprite.core")*/
	@include hqm("sprite.core",(
		btn: true,
		hover: (
			opacity: 0.8
		)
	));

	/*hqm("sprite.image")*/
	@include hqm("sprite.image",(
		spriteMap: $spriteMap,
		name: "dummy01",
		positionOnly: true,
	));
}

.hqm-link-styles{
	/*hqm("link.styles")*/
	@include hqm("link.styles", (
		color: (
			default : #333,
			link    : #CC33CC,
			visited : #CC33CC,
			hover   : #CC33CC,
			active  : #CC33CC,
			focus   : #CC33CC
		),
		underline: (
			default : true,
			link    : true,
			visited : true,
			hover   : false,
			active  : false,
			focus   : false
		)
	));
}

.hqm-font-cloud{
	/*hqm("font.cloud")*/
	@include hqm("font.cloud", 12px);
}