// ==============================
// [name] hisho-query v0.1.1
// [path] /hisho-query/_hisho-query.scss
// [desc] function mixin ライブラリ
// ==============================

// ------------------------------
// #string-function
//
$strHelp: '
- method -
[default] $unquote   : hq-str("unquote", $str);
[default] $quote     : hq-str("quote", $str);
[default] $length    : hq-str("length", $str);
[default] $insert    : hq-str("insert", $str, hoge, 3);
[default] $index     : hq-str("index", $str, fg);
[default] $slice     : hq-str("slice", $str, 1, 3);
[default] $upperCase : hq-str("upperCase", $str);
[default] $lowerCase : hq-str("lowerCase", $str);
[custom]  $strip     : hq-str("strip", $str);
[custom]  $succ      : hq-str("succ", $str);
[custom]  $match     : hq-str("match", $str, "bc");
[custom]  $replace   : hq-str("replace", $str, "bc", "xa");
[custom]  $sprit     : hq-str("sprit", $str, ".");
[custom]  $puts      : hq-str("puts", $str);
[default] $getId     : hq-str("getId"); //unique-id()
[custom]  $help      : hq-str("help");
';
// ------------------------------
@function hq-str($argument...){
	$_api: (
		unquote   : unquote,
		quote     : quote,
		length    : str-length,
		insert    : str-insert,
		index     : str-index,
		slice     : str-slice,
		upperCase : to-upper-case,
		lowerCase : to-lower-case,
		strip     : hq-str-strip,
		succ      : hq-str-succ,
		match     : hq-str-match,
		replace   : hq-str-replace,
		sprit     : hq-str-sprit,
		puts      : hq-str-puts,
		getId     : unique-id
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);

	@if $_name == "help"{
		$test: hq-str-puts($strHelp);
		@return null;
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #number-function
//
$numHelp: '
- method -
[default] $percentage : hq-num("percentage", (100px / 50px) );
[default] $round      : hq-num("round", 10.4px);
[default] $ceil       : hq-num("ceil", 10.4px);
[default] $floor      : hq-num("floor", 10.4px);
[default] $abs        : hq-num("abs", -15px);
[default] $min        : hq-num("min", 10px, 5px, 2px, 15px, 18px);
[default] $max        : hq-num("max", 10px, 5px, 2px, 15px, 18px);
[default] $unit       : hq-num("unit", 20em);
[default] $unitless   : hq-num("unitless", 20em);
[default] $comparable : hq-num("comparable", 15em, 15px);
';
// ------------------------------
@function hq-num($argument...){
	$_api: (
		percentage : percentage,
		per   : percentage,
		round : round,
		ceil  : ceil,
		floor : floor,
		abs   : abs,
		min   : min,
		max   : max,
		unit  : unit,
		unitless : unitless,
		comparable: comparable
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);

	@if $_name == "help"{
		$test: hq-str-puts($numHelp);
		@return null;
	}@else{
		@return call($_method, $_arg...);
	}
}


// ------------------------------
// #list-function
//
$listHelp: '
- method -
[default] $get       : hq-list("get", $list, 1);
[default] $length    : hq-list("length", $list);
[default] $index     : hq-list("index", $list, e);
[default] $push      : hq-list("push", $list, x);
[custom]  $unshift   : hq-list("unshift", $list, x);
[custom]  $shift     : hq-list("shift", $list, x);
[custom]  $pop       : hq-list("pop", $list, x);
[custom]  $slice     : hq-list("slice", $list, 3);
[custom]  $remove    : hq-list("remove", $list, c);
[default] $join      : hq-list("join", $list1, $list2, comma);
[default] $zip       : hq-list("zip", $list);
[custom]  $toSpace   : hq-list("toSpace", $list);
[custom]  $toComma   : hq-list("toComma", $list);
[custom]  $separator : hq-list("separator", $list);
[custom]  $reverse   : hq-list("reverse", $list);
[custom]  $help      : hq-list("help");
';
// ------------------------------
@function hq-list($argument...){
	$_api: (
		nth       : nth,
		get       : nth,
		setNth    : set-nth,
		set       : set-nth,
		length    : length,
		index     : index,
		append    : append,
		push      : append,
		prepend   : hq-list-prepend,
		unshift   : hq-list-prepend,
		shift     : hq-list-shift,
		pop       : hq-list-pop,
		slice     : hq-list-slice,
		remove    : hq-list-remove,
		join      : join,
		zip       : zip,
		toSpace   : hq-list-toSpace,
		toComma   : hq-list-toComma,
		separator : list-separator,
		reverse   : hq-list-reverse
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);

	@if $_name == "help"{
		$test: hq-str-puts($listHelp);
		@return null;
	}@else{
		@return call($_method, $_arg...);
	}
}


// ------------------------------
// #map-function
$mapHelp: '
- method -
[custom]  $get       : hq-map("get", $map, "cat.colorType");
[custom]  $set       : hq-map("set", $map, "cat.colorType", "blue");
[custom]  $extend    : hq-map("extend", $map1, $map2);
[custom]  $extend    : hq-map("extend", true, $map1, $map2);  //deepCopy
[default] $merge     : hq-map("merge", $map1, $map2);         //deepMap×
[custom]  $mergeDeep : hq-map("mergeDeep", $map1, $map2);
[default] $keys      : hq-map("keys", $map);                  //deepMap×
[default] $values    : hq-map("values", $map);                //deepMap×
[default] $hasKey    : hq-map("hasKey", $map, "hoge");
[default] $nth       : hq-map("nth", $map, 2);                //deepMap×
[default] $length    : hq-map("length", $map);
[default] $push      : hq-map("push", $map, foo hoge);
[default] $join      : hq-map("join", $map3, $map4, comma);   //deepMap×
[default] $zip       : hq-map("zip", $map);                   //deepMap×
[custom]  $toString  : hq-map("toString", $map);
[custom]  $help      : hq-map("help");
';
// ------------------------------
@function hq-map($argument...){
	$_api: (
		get       : hq-map-get-deep,
		set       : hq-map-set-deep,
		extend    : hq-map-extend,
		merge     : map-merge,
		mergeDeep : hq-map-merge-deep,
		keys      : map-keys,
		values    : map-values,
		hasKey    : map-has-key,
		nth       : nth,
		length    : length,
		index     : index,
		append    : append,
		push      : append,
		zip       : zip,
		join      : join,
		toString  : hq-map-to-string,
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);

	@if $_name == "help"{
		$test: hq-str-puts($mapHelp);
		@return null;
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #is-function
$isHelp: '
- method -
[default] $gValue   : hq-is("gValue", gvalue);
[default] $function : hq-is("function", hq-is);
[default] $mixin    : hq-is("mixin", hq);
[custom]  $string   : hq-is("string", "border");
[custom]  $number   : hq-is("number", 5px);
[custom]  $color    : hq-is("color", #ff0000);
[custom]  $map      : hq-is("map", $map);
[custom]  $list     : hq-is("list", $list1);
[custom]  $bool     : hq-is("bool", true);
[custom]  $help     : hq-is("help");
';
// ------------------------------
@function hq-is($argument...){
	$_api: (
		//local変数の判別ができない為、非対応（function wrapが原因？）
		//value       : variable-exists,
		globalValue : global-variable-exists,
		gValue      : global-variable-exists,
		function    : function-exists,
		mixin       : mixin-exists,
		string      : hq-is-string,
		number      : hq-is-number,
		color       : hq-is-color,
		map         : hq-is-map,
		list        : hq-is-list,
		bool        : hq-is-bool
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);

	@if $_name == "help"{
		$test: hq-str-puts($isHelp);
		@return null;
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #css-function
$cssHelp: '
- method -
[custom]  $toMap : hq-css("toMap", "border", solid 1px #ccc);
          -> shorthandで指定した値をmap形式に変換
[custom]  $getWidth  : hq-css("getWidth", 500px, solid 1px #ccc, 0 2px 3px);
          -> padding borderを省いたwidthを取得
[custom]  $getHeight : hq-css("getHeight", 500px, solid 1px #ccc, 0 2px 3px);
          -> padding borderを省いたheightを取得
';
// ------------------------------
@function hq-css($argument...){
	$_api: (
		toMap     : hq-css-to-map,
		getWidth  : hq-css-get-width,
		getHeight : hq-css-get-height
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);

	@if $_name == "help"{
		$test: hq-str-puts($cssHelp);
		@return null;
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #mixin
// @include hq("write", $map);
// @include hq("writePropaty", $map);
// @include hq("spriteCore", $options);
// @include hq("spriteImage", $options);
// @include hq("moduleCore", $map);
// @include hq("cloud", 12px);
// @include hq("linkStyle", $map);
// @include hq("console", $map);
// @include hq("help", $map);
// ------------------------------
