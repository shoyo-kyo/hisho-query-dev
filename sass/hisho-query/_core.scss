// ==============================
// [name] hisho-query v0.1.1
// [path] /hisho-query/_hisho-query.scss
// [desc] function mixin ライブラリ
// ==============================

// ------------------------------
// #hq-function
// ------------------------------

@function hq($argument...){
	$_api: (
		str: (
			help      : 0 hq-str-help,
			unquote   : 1 unquote,
			quote     : 1 quote,
			length    : 1 str-length,
			insert    : 3 str-insert,
			index     : 2 str-index,
			slice     : 3 str-slice,
			upcase    : 1 to-upper-case,
			downcase  : 1 to-lower-case,
			capitalize: 1 hq-str-capitalize,
			flUpcase  : 1 hq-str-first-letter-upper-case,
			flDowncase: 1 hq-str-first-letter-lower-case,
			strip     : 1 hq-str-strip,
			succ      : 1 hq-str-succ,
			match     : 2 hq-str-match,
			replace   : 3 hq-str-replace,
			split     : 2 hq-str-split,
			puts      : 1 hq-str-puts,
			getId     : 1 unique-id,
			reverse   : 1 hq-str-reverse,
		),
		num: (
			help       : 0 hq-num-help,
			percentage : 1 percentage,
			per        : 1 percentage,
			round      : 1 round,
			ceil       : 1 ceil,
			floor      : 1 floor,
			abs        : 1 abs,
			min        : i min,
			max        : i max,
			unit       : 1 unit,
			unitless   : 1 unitless,
			comparable : 2 comparable,
		),
		list: (
			help     : 0 hq-list-help,
			nth      : 2 nth,
			get      : 2 nth,
			setNth   : 3 set-nth,
			set      : 3 set-nth,
			length   : 1 length,
			index    : 2 index,
			append   : 2 append,
			push     : 2 append,
			prepend  : 2 hq-list-prepend,
			unshift  : 2 hq-list-prepend,
			shift    : 1 hq-list-shift,
			pop      : 1 hq-list-pop,
			slice    : 3 hq-list-slice,
			remove   : 2 hq-list-remove,
			join     : 3 join,
			zip      : 1 zip,
			toSpace  : 1 hq-list-toSpace,
			toComma  : 1 hq-list-toComma,
			separator: 1 list-separator,
			reverse  : 1 hq-list-reverse,
		),
		map: (
			help      : 0 hq-map-help,
			get       : 2 hq-map-get-deep,
			set       : 3 hq-map-set-deep,
			extend    : i hq-map-extend,
			merge     : 2 map-merge,
			mergeDeep : 2 hq-map-merge-deep,
			keys      : 1 map-keys,
			values    : 1 map-values,
			hasKey    : 2 map-has-key,
			nth       : 2 nth,
			length    : 1 length,
			append    : 2 append,
			push      : 2 append,
			join      : 3 join,
			zip       : 1 zip,
			toString  : 1 hq-map-to-string,
		),
		is: (
			help       : 0 hq-is-help,
			globalValue: 1 global-variable-exists,
			gValue     : 1 global-variable-exists,
			function   : 1 function-exists,
			mixin      : 1 mixin-exists,
			string     : 1 hq-is-string,
			number     : 1 hq-is-number,
			color      : 1 hq-is-color,
			map        : 1 hq-is-map,
			list       : 1 hq-is-list,
			bool       : 1 hq-is-bool,
		),
		css: (
			help      : 0 hq-css-help,
			toMap     : 1 hq-css-to-map,
			toShort   : 1 hq-css-to-short,
			getWidth  : 3 hq-css-get-width,
			getHeight : 3 hq-css-get-height,
		)
	);
	
	$_query: nth($argument,1);
	$_qList: hq-str-split($_query,"->");
	$_arg: hq-list-slice($argument,2);
	$_result: null;

	@each $_name in $_qList{
		$_name: hq-str-strip($_name);
		$_data: hq-map-get-deep($_api, $_name);
		$_method: nth($_data,2);
		$_argNum: nth($_data,1);
		//error
		@if $_method == null{
			$_error: "    error hisho-query undefined　method '" + $_name + "'";
			$_puts: hq-str-puts($_error);
			$_result: $_error;
		//default
		}@else{
			$_setArg: hq-list-slice($_arg, 1, $_argNum);
			$_result: call($_method, $_setArg...);
		}
	}
	@return $_result;
}



// ------------------------------
// #string-function
//
$strHelp: '
- method -
[default] unquote   : hq-str("unquote", $str);
[default] quote     : hq-str("quote", $str);
[default] length    : hq-str("length", $str);
[default] insert    : hq-str("insert", $str, hoge, 3);
[default] index     : hq-str("index", $str, fg);
[default] slice     : hq-str("slice", $str, 1, 3);
[default] upcase    : hq-str("upcase", $str);
[default] downcase  : hq-str("lowerCase", $str);
[custom]  capitalize: hq-str("capitalize", $str);
[custom]  FlUpcase  : hq-str("flUpcase", $str);
[custom]  FlDowncase: hq-str("flDowncase", $str);
[custom]  strip     : hq-str("strip", $str);
[custom]  succ      : hq-str("succ", $str);
[custom]  match     : hq-str("match", $str, "bc");
[custom]  replace   : hq-str("replace", $str, "bc", "xa");
[custom]  split     : hq-str("split", $str, ".");
[custom]  puts      : hq-str("puts", $str);
[default] getId     : hq-str("getId"); //unique-id()
[custom]  reverse   : hq-str("reverse", $str);
[custom]  help      : hq-str("help");
';
// ------------------------------
@function hq-str($argument...){
	$_api: (
		unquote   : unquote,
		quote     : quote,
		length    : str-length,
		insert    : str-insert,
		index     : str-index,
		slice     : str-slice,
		upcase    : to-upper-case,
		downcase  : to-lower-case,
		capitalize: hq-str-capitalize,
		flUpcase  : hq-str-first-letter-upper-case,
		flDowncase: hq-str-first-letter-lower-case,
		strip     : hq-str-strip,
		succ      : hq-str-succ,
		match     : hq-str-match,
		replace   : hq-str-replace,
		split     : hq-str-split,
		puts      : hq-str-puts,
		getId     : unique-id,
		reverse   : hq-str-reverse
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($strHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-str no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #number-function
//
$numHelp: '
- method -
[default] percentage : hq-num("percentage", (100px / 50px) );
[default] round      : hq-num("round", 10.4px);
[default] ceil       : hq-num("ceil", 10.4px);
[default] floor      : hq-num("floor", 10.4px);
[default] abs        : hq-num("abs", -15px);
[default] min        : hq-num("min", 10px, 5px, 2px, 15px, 18px);
[default] max        : hq-num("max", 10px, 5px, 2px, 15px, 18px);
[default] unit       : hq-num("unit", 20em);
[default] unitless   : hq-num("unitless", 20em);
[default] comparable : hq-num("comparable", 15em, 15px);
';
// ------------------------------
@function hq-num($argument...){
	$_api: (
		percentage : percentage,
		per   : percentage,
		round : round,
		ceil  : ceil,
		floor : floor,
		abs   : abs,
		min   : min,
		max   : max,
		unit  : unit,
		unitless : unitless,
		comparable: comparable
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($numHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-num no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}


// ------------------------------
// #list-function
//
$listHelp: '
- method -
[default] get       : hq-list("get", $list, 1);
[default] length    : hq-list("length", $list);
[default] index     : hq-list("index", $list, e);
[default] push      : hq-list("push", $list, x);
[custom]  unshift   : hq-list("unshift", $list, x);
[custom]  shift     : hq-list("shift", $list, x);
[custom]  pop       : hq-list("pop", $list, x);
[custom]  slice     : hq-list("slice", $list, 3);
[custom]  remove    : hq-list("remove", $list, c);
[default] join      : hq-list("join", $list1, $list2, comma);
[default] zip       : hq-list("zip", $list);
[custom]  toSpace   : hq-list("toSpace", $list);
[custom]  toComma   : hq-list("toComma", $list);
[custom]  separator : hq-list("separator", $list);
[custom]  reverse   : hq-list("reverse", $list);
[custom]  help      : hq-list("help");
';
// ------------------------------
@function hq-list($argument...){
	$_api: (
		nth       : nth,
		get       : nth,
		setNth    : set-nth,
		set       : set-nth,
		length    : length,
		index     : index,
		append    : append,
		push      : append,
		prepend   : hq-list-prepend,
		unshift   : hq-list-prepend,
		shift     : hq-list-shift,
		pop       : hq-list-pop,
		slice     : hq-list-slice,
		remove    : hq-list-remove,
		join      : join,
		zip       : zip,
		toSpace   : hq-list-toSpace,
		toComma   : hq-list-toComma,
		separator : list-separator,
		reverse   : hq-list-reverse
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($listHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-list no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}


// ------------------------------
// #map-function
$mapHelp: '
- method -
[custom]  get       : hq-map("get", $map, "cat.colorType");
[custom]  set       : hq-map("set", $map, "cat.colorType", "blue");
[custom]  extend    : hq-map("extend", $map1, $map2);
[custom]  extend    : hq-map("extend", true, $map1, $map2);  //deepCopy
[default] merge     : hq-map("merge", $map1, $map2);         //deepMap×
[custom]  mergeDeep : hq-map("mergeDeep", $map1, $map2);
[default] keys      : hq-map("keys", $map);                  //deepMap×
[default] values    : hq-map("values", $map);                //deepMap×
[default] hasKey    : hq-map("hasKey", $map, "hoge");
[default] nth       : hq-map("nth", $map, 2);                //deepMap×
[default] length    : hq-map("length", $map);
[default] push      : hq-map("push", $map, foo hoge);
[default] join      : hq-map("join", $map3, $map4, comma);   //deepMap×
[default] zip       : hq-map("zip", $map);                   //deepMap×
[custom]  toString  : hq-map("toString", $map);
[custom]  help      : hq-map("help");
';
// ------------------------------
@function hq-map($argument...){
	$_api: (
		get       : hq-map-get-deep,
		set       : hq-map-set-deep,
		extend    : hq-map-extend,
		merge     : map-merge,
		mergeDeep : hq-map-merge-deep,
		keys      : map-keys,
		values    : map-values,
		hasKey    : map-has-key,
		nth       : nth,
		length    : length,
		index     : index,
		append    : append,
		push      : append,
		zip       : zip,
		join      : join,
		toString  : hq-map-to-string,
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($mapHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-map no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #is-function
$isHelp: '
- method -
[default] gValue   : hq-is("gValue", gvalue);
[default] function : hq-is("function", hq-is);
[default] mixin    : hq-is("mixin", hq);
[custom]  string   : hq-is("string", "border");
[custom]  number   : hq-is("number", 5px);
[custom]  color    : hq-is("color", #ff0000);
[custom]  map      : hq-is("map", $map);
[custom]  list     : hq-is("list", $list1);
[custom]  bool     : hq-is("bool", true);
[custom]  help     : hq-is("help");
';
// ------------------------------
@function hq-is($argument...){
	$_api: (
		//local変数の判別ができない為、非対応（function wrapが原因？）
		//value       : variable-exists,
		globalValue : global-variable-exists,
		gValue      : global-variable-exists,
		function    : function-exists,
		mixin       : mixin-exists,
		string      : hq-is-string,
		number      : hq-is-number,
		color       : hq-is-color,
		map         : hq-is-map,
		list        : hq-is-list,
		bool        : hq-is-bool
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($isHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-is no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #css-function
$cssHelp: '
- method -
[custom]  toMap : hq-css("toMap", "border", solid 1px #ccc);
          -> shorthandで指定した値をmap形式に変換

[custom]  toMap : hq-css("toShort", $map);
          -> mapで指定した値をshorthand形式に変換

[custom]  getWidth  : hq-css("getWidth", 500px, solid 1px #ccc, 0 2px 3px);
          -> padding borderを省いたwidthを取得

[custom]  getHeight : hq-css("getHeight", 500px, solid 1px #ccc, 0 2px 3px);
          -> padding borderを省いたheightを取得
';
// ------------------------------
@function hq-css($argument...){
	$_api: (
		toMap     : hq-css-to-map,
		toShort   : hq-css-to-short,
		getWidth  : hq-css-get-width,
		getHeight : hq-css-get-height
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);

	//help
	@if $_name == "help"{
		$test: hq-str-puts($cssHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-css no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #mixin
// @include hq("write", $map);
// @include hq("write.propaty", $map);
// @include hq("sprite", $options);
// @include hq("sprite.core", $options);
// @include hq("sprite.image", $options);
// @include hq("module", $map);
// @include hq("module.core", $map);
// @include hq("font.cloud", 12px);
// @include hq("link.style", $map);
// @include hq("help", $map);
// ------------------------------

@mixin hqm($argument...){
	$_name: nth($argument,1);
	$_arg: hq-list-slice($argument,2);
	
	@if $_name == "write"{
		@include hq-mixin-write($_arg...);

	}@else if $_name == "write.propaty"{
		@include hq-mixin-write-propaty($_arg...);

	}@else if $_name == "sprite"{
		@include hq-mixin-sprite($_arg...);

	}@else if $_name == "sprite.core"{
		@include hq-mixin-sprite-core($_arg...);

	}@else if $_name == "sprite.image"{
		@include hq-mixin-sprite-image($_arg...);

	}@else if $_name == "module"{
		@include hq-mixin-module($_arg...);

	}@else if $_name == "module.core"{
		@include hq-mixin-module-core($_arg...);

	}@else if $_name == "font.cloud"{
		@include hq-mixin-font-cloud($_arg...);

	}@else if $_name == "link.styles"{
		@include hq-mixin-link-styles($_arg...);

	}@else if $_name == "help"{
		@include hq-mixin-help($_arg...);
		$test: hq-str-puts($mixinHelp);
	}

}
