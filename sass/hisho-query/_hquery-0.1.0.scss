@charset "utf-8";
/*!
 * hisho-query v0.1.0
 * Sass3 and compass1 Library
 * http://query.hisho.com
 * 
 * Copyright 2014 shoyo kyo
 * Released under the MIT license
 * https://github.com/syouyou/hisho-query/blob/master/LICENSE
 * 
 * Date: 2014-02-06
 */

// ------------------------------
// [name] hq-list-pop v1.0.0
// [path] /hisho-query/hq-map/_pop.scss
// [desc] listの最後を削除します
// [return] list
// [exsample]
//   hq-list-pop($list);
// ------------------------------
@function hq-list-pop($list){
	$_result: ();
	@for $i from 1 through length($list) - 1{
		$_result: append($_result, nth($list, $i));
	}
	@return $_result;
}


// ------------------------------
// [name] hq-list-prepend v1.0.0
// [path] /hisho-query/hq-map/_prepend.scss
// [desc] listの先頭に追加する
// [return] list
// [exsample]
//   hq-list-prepend($list);
// ------------------------------
@function hq-list-prepend($list,$value){
	$_valueList: ();
	$_valueList: append($_valueList, $value);
	@return join($_valueList, $list);
}


// ------------------------------
// [name] hq-list-remove v1.0.0
// [path] /hisho-query/hq-map/_remove.scss
// [desc] 指定の値を削除
// [return] list
// [exsample]
//   hq-list-remove($list);
// ------------------------------
@function hq-list-remove($list, $value){
	$_index: index($list, $value);
	$_result1: hq-list-slice($list, 1, $_index - 1);
	$_result2: hq-list-slice($list, $_index + 1, length($list));
	@return join($_result1, $_result2);
}


// ------------------------------
// [name] hq-list-reverse v1.0.0
// [path] /hisho-query/hq-map/_reverse.scss
// [desc] listの先頭を削除します
// [return] list
// [exsample]
//   hq-list-reverse($list);
// ------------------------------
@function hq-list-reverse($list){
	$_result: ();
	$_len: length($list);
	@for $i from 0 through $_len - 1{
		$_num : $_len - $i;
		$_result: append($_result, nth($list, $_num));
	}
	@return $_result;
}


// ------------------------------
// [name] hq-list-slice v1.0.0
// [path] /hisho-query/hq-map/_slice.scss
// [desc] listの先頭を削除します
// [return] list
// [exsample]
//   hq-list-slice($list,3,5);
// ------------------------------
@function hq-list-slice($list,$start,$end:null){
	$_result: ();
	@if $end == null{
		$end: length($list);
	}
	@for $i from $start through $end{
		$_result: append($_result, nth($list, $i));
	}
	@return $_result;
}


// ------------------------------
// [name] hq-list-toSpace v1.0.0
// [path] /hisho-query/hq-map/_toComma.scss
// [desc] listのseparatorをCommaに変換
// [return] list
// [exsample]
//   hq-list-toSpace($list);
// ------------------------------
@function hq-list-toComma($list){
	@return join((),$list,comma);
}


// ------------------------------
// [name] hq-list-toSpace v1.0.0
// [path] /hisho-query/hq-map/_toSpace.scss
// [desc] listのseparatorをSpaceに変換
// [return] list
// [exsample]
//   hq-list-toSpace($list);
// ------------------------------
@function hq-list-toSpace($list){
	@return join((),$list,space);
}


// ------------------------------
// [name] hq-list-shift v1.0.0
// [path] /hisho-query/hq-map/_shift.scss
// [desc] listの先頭を削除します
// [return] list
// [exsample]
//   hq-list-shift($list);
// ------------------------------
@function hq-list-shift($list){
	$_result: ();
	@for $i from 2 through length($list){
		$_result: append($_result, nth($list, $i));
	}
	@return $_result;
}


// ------------------------------
// [name] hq-map-get-deep v1.0.0
// [path] /hisho-query/hq-map/_get-deep.scss
// [desc] 深い階層にある値を取得
// [return] map
// [exsample]
//   hq-map-get-deep($map, color.test.A);
// ------------------------------
@function hq-map-get-deep($map, $key){
	$keyList: hq-str-split($key, ".");
	$_result: $map;
	@each $v in $keyList{
		$_result: map-get($_result,$v);
	}
	@return $_result;
}


// ------------------------------
// [name] hq-map-set v1.0.0
// [path] /hisho-query/hq-map/_set.scss
// [desc] mapに値を設定し、mapをreturn
// [return] map
// [exsample]
//   map-set($map, color, #000);
// ------------------------------
@function hq-map-set($map, $key, $value){
	$_rValue: ( #{$key} : $value );
	$_result: map-merge($map, $_rValue);
	@return $_result;
}


// ------------------------------
// [name] hq-map-set-deep v1.0.0
// [path] /hisho-query/hq-map/_set-deep.scss
// [desc] 深い階層にある値を変更し、mapをreturn
// [return] map
// [exsample]
//   hq-map-set-deep($map, "color.test.A", #000);
// ------------------------------
@function hq-map-set-deep($map, $key, $value){
	$_keyList: hq-str-split($key, ".");
	$_length: length($_keyList);
	
	//mapSet
	$_sMap: null;
	@for $i from 0 through $_length - 1 {
		$_num: $_length - $i;
		$_key: nth($_keyList, $_num);
		@if $_sMap {
			$_sMap: ( #{$_key} : $value );
		}@else{
			$_sMap: ( #{$_key} : $_sMap );
		}
	}
	$_result: hq-map-merge-deep($map, $_sMap);
	@return $_result;
}


// ------------------------------
// [name] hq-map-merge-deep v1.0.0
// [path] /hisho-query/hq-map/_hq-map-merge-deep.scss
// [desc] mapのdeep_margeを行う
// [return] map
// [exsample]
//   hq-map-merge-deep($map1, $map2);
// ------------------------------
@function hq-map-merge-deep($self:null, $target:null){
	$_result: $self;
	
	@if type-of($target) == map{
		@each $k, $v in $target{
			//初期化
			@if type-of($_result) != map{
				$_result: ();
			}
			
			//map形式の場合再loop
			@if type-of($v) == map{
				$_rSelf: if(map-get($_result, $k), map-get($_result, $k), () );
				$_rValue: hq-map-merge-deep( $_rSelf, $v );
				//$_result: map-merge($_result, $_rValue);
				$_result: hq-map-set($_result, $k, $_rValue);
			//値の場合上書き
			}@else{
				$_result: hq-map-set($_result, $k, $v);
			}
		}
	}
	@return $_result;
}


// ------------------------------
// [name] hq-map-extend v1.0.0
// [path] /hisho-query/hq-map/_hq-map-extend.scss
// [desc] mapのextend処理 (引数可変長で対応可能)
// [exsample]
//   hq-map-extend($map1, $map2);
//   hq-map-extend(true, $map1, $map2, $map3); //deep_marge
// ------------------------------
@function hq-map-extend( $argument... ){
	$_result: null;
	$_length: length($argument);
	$_isDeep: if( type-of(nth($argument,1)) == bool, nth($argument,1), false );

	@for $i from 0 through $_length - 1 {
		$_num: $_length - $i;
		$_value: nth($argument, $_num);
		@if type-of($_value) == map{
			@if $_result{
				//deepFlag
				@if $_isDeep{
					$_result : hq-map-merge-deep($_value, $_result);
				}@else{
					$_result : map-merge($_value, $_result);
				}
			}@else{
				$_result: $_value;
			}
		}
	}
	@return $_result;
}


// ------------------------------
// [name] hq-css-get-width v1.0.0
// [path] /hisho-query/hq-css/_get-width.scss
// [desc] padding&borderを元にwidthを算出
// [exsample]
//   hq-css-get-width($width,$border,$padding)
// ------------------------------
@function hq-css-get-width($width:null,$border:null,$padding:null){
	@if $width == null{
		@return null;
	}
	
	$_result: $width;

	//border
	@if type-of($border) != map{
		$border: hq-css-to-map("border", $border);
	}@else if map-has-key($border,"all"){
		$border: hq-css-to-map("border", map-get($_border, "all"));
	}

	@if map-has-key($border,"left") or map-has-key($border,"right"){
		
		@if map-has-key($border,"left") and map-get($border, "left") {
			$_borderL : hq-css-to-map("border", map-get($border, "left"));
			$_result: $_result - map-get($_borderL, "width");
		}
		@if map-has-key($border,"right") and map-get($border, "right"){
			$_borderR : hq-css-to-map("border", map-get($border, "right"));
			$_result: $_result - map-get($_borderR, "width");
		}

	}@else if map-has-key($border,"width") and map-get($border, "width"){
		$_result: $_result - ( map-get($border, "width") * 2 );
	}

	//padding
	@if type-of($padding) != map{
		$padding: hq-css-to-map("padding", $padding);
	}

	@if map-get($padding, "left"){
		$_result: $_result - map-get($padding, "left");
	}
	@if map-get($padding, "right"){
		$_result: $_result - map-get($padding, "right");
	}

	@return $_result;
}



// ------------------------------
// [name] hq-css-get-height v1.0.0
// [path] /hisho-query/hq-css/_get-height.scss
// [desc] padding&borderを元にheightを算出
// [exsample]
//   hq-css-get-height($height,$border,$padding)
// ------------------------------
@function hq-css-get-height($height:null,$border:null,$padding:null){
	@if $height == null{
		@return null;
	}
	
	$_result: $height;

	//border
	@if type-of($border) != map{
		$border: hq-css-to-map("border", $border);
	}@else if map-has-key($border,"all"){
		$border: hq-css-to-map("border", map-get($_border, "all"));
	}

	@if map-has-key($border,"top") or map-has-key($border,"bottom"){
		
		@if map-has-key($border,"top") and map-get($border, "top"){
			$_borderT : hq-css-to-map("border", map-get($border, "top"));
			$_result: $_result - map-get($_borderT, "width");
		}
		@if map-has-key($border,"bottom") and map-get($border, "bottom"){
			$_borderB : hq-css-to-map("border", map-get($border, "bottom"));
			$_result: $_result - map-get($_borderB, "width");
		}

	}@else if map-has-key($border,"width") and map-get($border, "width"){
		$_result: $_result - ( map-get($border, "width") * 2 );
	}

	//padding
	@if type-of($padding) != map{
		$padding: hq-css-to-map("padding", $padding);
	}

	@if map-get($padding, "top"){
		$_result: $_result - map-get($padding, "top");
	}
	@if map-get($padding, "bottom"){
		$_result: $_result - map-get($padding, "bottom");
	}

	@return $_result;
}



// ------------------------------
// [name] hq-css-to-map v1.0.0
// [path] /hisho-query/hq-css/_to-map-map
// [desc] ショートハンド指定されているリストをmapに変換
//        対応: margin,padding,border,background,font
// [return] map, list, null
// [exsample]
//   hq-css-to-map("margin", 0 10px 2px 5px)
// ------------------------------


// ------------------------------
// [name] hq-css-to-map-margin
// [desc] ショートハンド指定されているmargin,paddingリストをmapに変換
// ------------------------------
@function hq-css-to-map-margin($list){
	$_result: (
		top:    null,
		right:  null,
		bottom: null,
		left:   null
	);
	
	//numberの場合mapに変換
	@if type-of($list) == number {
		$_result: hq-map-extend($_result, (
			top:    $list,
			right:  $list,
			bottom: $list,
			left:   $list
		));
		@return $_result;

	//listの場合mapに変換
	}@else if type-of($list) == list {

		$_len:  length($list);

		@if $_len == 2{
			$_result: hq-map-extend($_result, (
				top:    nth($list, 1),
				right:  nth($list, 2),
				bottom: nth($list, 1),
				left:   nth($list, 2)
			));

		} @else if $_len == 3{
			$_result: hq-map-extend($_result, (
				top:    nth($list, 1),
				right:  nth($list, 2),
				bottom: nth($list, 3),
				left:   nth($list, 2)
			));

		} @else if $_len == 4{
			$_result: hq-map-extend($_result, (
				top:    nth($list, 1),
				right:  nth($list, 2),
				bottom: nth($list, 3),
				left:   nth($list, 4)
			));
		}
		@return $_result;
	
	//以外の場合は空のresult
	}@else{
		@return $_result;
	}
}

// ------------------------------
// [name] hq-css-to-map-border
// [desc] ショートハンド指定されているborderリストをmapに変換
// [return] map
// ------------------------------
@function hq-css-to-map-border-setter($value){
	@if type-of($value) == color{
		@return (color: $value);

	}@else if type-of($value) == number{
		@return (width: $value);
	
	}@else if type-of($value) == string and hq-str-match($value,"/thin|medium|thick/"){
		@return (width: $value);

	}@else if type-of($value) == string{
		@return (style: $value);

	}@else{
		@return ();
	}
}
@function hq-css-to-map-border($list){
	$_result: (
		style:    null,
		width:  null,
		color: null
	);
	//list形式
	@if type-of($list) == list{
		@each $_v in $list{
			$_result: hq-map-extend($_result, hq-css-to-map-border-setter($_v));
		}
	//単一指定
	}@else{
		$_result: hq-map-extend($_result, hq-css-to-map-border-setter($list));
	}
	@return $_result;
}

// ------------------------------
// [name] hq-css-to-map-background
// [desc] ショートハンド指定されているbackgroundリストをmapに変換
// [return] map
// ------------------------------
@function hq-css-to-map-background-setter($value){
	@if type-of($value) == color{
		@return (color: $value);
	
	}@else if type-of($value) == string and hq-str-match($value,"/url\(.*\)/"){
		@return (image: $value);

	}@else if type-of($value) == string and hq-str-match($value,"repeat"){
		@return (repeat: $value);

	}@else if type-of($value) == string and hq-str-match($value,"/fixed|scroll/"){
		@return (attachment: $value);

	}@else{
		@return ();
	}
}
@function hq-css-to-map-background($list){
	$_result: (
		color: null,
		image: null,
		repeat: null,
		attachment: null,
		position: null
	);
	$_number1: null;
	$_number2: null;
	//list形式
	@if type-of($list) == list{
		@each $_v in $list{
			@if type-of($_v) == number{
				@if $_number1 == null{
					$_number1: $_v;
				}@else if $_number2 == null{
					$_number2: $_v;
				}
			}@else{
				$_result: hq-map-extend($_result, hq-css-to-map-background-setter($_v));
			}
		}
		@if $_number1 and $_number2{
			$_result: hq-map-extend($_result, (
				position: $_number1 $_number2
			));
		}
	//単一指定
	}@else{
		$_result: hq-map-extend($_result, hq-css-to-map-background-setter($list));
	}
	@return $_result;
}

// ------------------------------
// [name] hq-css-to-map-font
// [desc] ショートハンド指定されているfontリストをmapに変換
// [return] map
// ------------------------------
@function hq-css-to-map-font-setter($value){
	@if type-of($value) == color{
		@return (color: $value);
	
	//}@else if type-of($value) == number and hq-str-match($value,"/100|200|300|400|500|600|700|800|900/"){
	//	@return (weight: $value);

	}@else if type-of($value) == number{
		@return (size: $value);

	}@else if type-of($value) == string and hq-str-match($value,"/normal|bold|lighter|bolder/"){
		@return (weight: $value);

	}@else if type-of($value) == string and hq-str-match($value,"/normal|italic|oblique/"){
		@return (style: $value);

	}@else if type-of($value) == string and hq-str-match($value,"/normal|small-caps/"){
		@return (variant: $value);

	}@else if type-of($value) == string and hq-str-match($value,"/\//"){
		@return (size: hq-str-split($value, "/", 0));
		@return (line-height: hq-str-split($value, "/", 1));

	}@else if type-of($value) == string{
		@return (family: $value);

	}@else{
		@return ();
	}
}
@function hq-css-to-map-font($list){
	$_result: (
		size:    null,
		line-height:  null,
		style: null,
		variant: null,
		weight: null,
		family: null
	);
	//list形式
	@if type-of($list) == list{
		@each $_v in $list{
			$_result: hq-map-extend($_result, hq-css-to-map-font-setter($_v));
		}
	//単一指定
	}@else{
		$_result: hq-map-extend($_result, hq-css-to-map-font-setter($list));
	}
	@return $_result;
}

// ------------------------------
// [name] hq-css-to-map-list-style
// [desc] ショートハンド指定されているfontリストをmapに変換
// [return] map
// ------------------------------
@function hq-css-to-map-list-style-setter($value){

	
	@if type-of($value) == string and hq-str-match($value,"/outside|inside/"){
		@return (position: $value);

	}@else if type-of($value) == string and hq-str-match($value,"/url\(.*\)/"){
		@return (image: $value);

	}@else if type-of($value) == string{
		@return (type: $value);

	}@else{
		@return ();
	}
}
@function hq-css-to-map-list-style($list){
	$_result: (
		type:    null,
		image:  null,
		position: null
	);
	
	//list形式
	@if type-of($list) == list{
		@each $_v in $list{
			$_result: hq-map-extend($_result, hq-css-to-map-list-style-setter($_v));
		}
	//単一指定
	}@else{
		$_result: hq-map-extend($_result, hq-css-to-map-list-style-setter($list));
	}
	@return $_result;
}


// ------------------------------
// [name] hq-css-to-map
// ------------------------------
@function hq-css-to-map($type, $list){
	//mapの場合
	@if type-of($list) == map{
		@return $list;

	//margin-padding
	}@else if $type == "margin" or $type == "padding" {
		@return hq-css-to-map-margin($list);

	//border
	}@else if $type == "border" or $type == "outline"{
		@return hq-css-to-map-border($list);

	//background
	}@else if $type == "background"{
		@return hq-css-to-map-background($list);

	//font
	}@else if $type == "font"{
		@return hq-css-to-map-font($list);
	
	//list-style
	}@else if $type == "list-style"{
		@return hq-css-to-map-list-style($list);

	//非対応のtypeはまま返す
	}@else{
		@return $list;
	}
}


// ------------------------------
// [name] hq-css-to-short v1.0.0
// [path] /hisho-query/hq-css/_to-short-map
// [desc] map指定されているcssをショートハンドに変換
//        対応: margin,padding,border,background,font
// [return] map, list, null
// [exsample]
//   hq-css-to-short("margin", 0 10px 2px 5px)
// ------------------------------


// ------------------------------
// [name] hq-css-to-short-margin
// [desc] map指定されているmargin,paddingリストをショートハンドに変換
// ------------------------------
@function hq-css-to-short-margin($map){
	$_target: top,right,left,bottom;
	$_isSet: true;
	$_result: ();
	
	//map内容をチェック
	@each $_v in $_target{
		@if map-get($map,$_v) == null{
			$_isSet: false;
		}
	}
	
	//対象
	@if $_isSet{

		$_top: map-get($map,"top");
		$_right: map-get($map,"right");
		$_bottom: map-get($map,"bottom");
		$_left: map-get($map,"left");

		$_isAll: if( $_left == $_right and $_top == $_bottom and $_top == $_right, true, false );
		$_isX: if( $_left == $_right, true, false );
		$_isY: if( $_top == $_bottom, true, false );
		$_type: null;

		//値が全て一致
		@if $_isAll == true{
			@return $_top;
		//値が不一致
		}@else if $_isX == false and $_isY == false{
			$_result: append($_result, $_top);
			$_result: append($_result, $_right);
			$_result: append($_result, $_bottom);
			$_result: append($_result, $_left);
			$_result: join((), $_result, space);
			@return $_result;
		//横のみ一致
		}@else if $_isX == true and $_isY == false{
			$_result: append($_result, $_top);
			$_result: append($_result, $_right);
			$_result: append($_result, $_bottom);
			$_result: join((), $_result, space);
			@return $_result;
		//縦のみ一致
		}@else if $_isX == false and $_isY == true{
			$_result: append($_result, $_top);
			$_result: append($_result, $_right);
			$_result: append($_result, $_bottom);
			$_result: append($_result, $_left);
			$_result: join((), $_result, space);
			@return $_result;
		//縦一致＆横一致
		}@else if $_isX == true and $_isY == true{
			$_result: append($_result, $_top);
			$_result: append($_result, $_right);
			$_result: join((), $_result, space);
			@return $_result;
		}
	
	//非対象
	}@else{
		@return null;
	}
}

// ------------------------------
// [name] hq-css-to-short-border
// [desc] ショートハンド指定されているborderリストをmapに変換
// [return] map
// ------------------------------
@function hq-css-to-short-border($map){
	$_target: style,width,color;
	$_isSet: true;
	$_result: ();
	
	//対象以外の値があるかチェック
	@each $_k, $_v in $map{
		@if index($_target,$_k) == false{
			$_isSet: false;
		}
	}
	//対象
	@if $_isSet {
		@each $_v in $_target{
			@if map-get($map,$_v) {
				$_result: append($_result, map-get($map,$_v));
			}
		}
		$_result: join((), $_result, space);
		@return $_result;
	//非対象
	}@else{
		@return null;
	}
}

// ------------------------------
// [name] hq-css-to-short-background
// [desc] ショートハンド指定されているリストをmapに変換
// [return] map
// ------------------------------
@function hq-css-to-short-background($map){
	$_target: image,repeat,position,attachment,color;
	$_isSet: true;
	$_result: ();
	
	//対象以外の値があるかチェック
	@each $_k, $_v in $map{
		@if index($_target,$_k) == false{
			$_isSet: false;
		}
	}
	//対象
	@if $_isSet {
		@each $_v in $_target{
			@if map-get($map,$_v) {
				$_result: append($_result, map-get($map,$_v));
			}
		}
		$_result: join((), $_result, space);
		@return $_result;
	//非対象
	}@else{
		@return null;
	}
}

// ------------------------------
// [name] hq-css-to-short-font
// [desc] ショートハンド指定されているfontリストをmapに変換
// [return] map
// ------------------------------
@function hq-css-to-short-font($map){
	$_target: style,variant,weight,size,line-height,family;
	$_isSet: true;
	$_result: ();
	
	//対象以外の値があるかチェック
	@each $_k, $_v in $map{
		@if index($_target,$_k) == false{
			$_isSet: false;
		}
	}
	//対象
	@if $_isSet {
		$_style: map-get($map,"style");
		$_variant: map-get($map,"variant");
		$_weight: map-get($map,"weight");
		$_size: map-get($map,"size");
		$_line: map-get($map,"line-height");
		$_family: map-get($map,"family");

		@if $_style{
			$_result: append($_result, $_style);
		}
		@if $_variant{
			$_result: append($_result, $_variant);
		}
		@if$_weight{
			$_result: append($_result, $_weight);
		}

		@if $_size and $_line{
			$_result: append($_result, $_size + "/" + $_line);
		}@else if $_size and $_line == null{
			$_result: append($_result, $_size);
		}

		@if $_family{
			$_result: append($_result, $_family);
		}
		
		$_result: join((), $_result, space);
		@return $_result;
	//非対象
	}@else{
		@return null;
	}
}

// ------------------------------
// [name] hq-css-to-short-list-style
// [desc] ショートハンド指定されているリストをmapに変換
// [return] map
// ------------------------------
@function hq-css-to-short-list-style($map){
	$_target: image,type,position;
	$_isSet: true;
	$_result: ();
	
	//対象以外の値があるかチェック
	@each $_k, $_v in $map{
		@if index($_target,$_k) == false{
			$_isSet: false;
		}
	}
	//対象
	@if $_isSet {
		@each $_v in $_target{
			@if map-get($map,$_v) {
				$_result: append($_result, map-get($map,$_v));
			}
		}
		$_result: join((), $_result, space);
		@return $_result;
	//非対象
	}@else{
		@return null;
	}
}

// ------------------------------
// [name] hq-css-to-short
// ------------------------------
@function hq-css-to-short($type, $map){
	//listの場合
	@if type-of($map) == list{
		@return $map;

	//margin-padding
	}@else if $type == margin or $type == padding {
		@return hq-css-to-short-margin($map);

	//border
	}@else if $type == border or $type == outline{
		@return hq-css-to-short-border($map);

	//background
	}@else if $type == background{
		@return hq-css-to-short-background($map);

	//font
	}@else if $type == font{
		@return hq-css-to-short-font($map);

	//list-style
	}@else if $type == list-style{
		@return hq-css-to-short-list-style($map);

	//非対応のtypeはまま返す
	}@else{
		@return $map;
	}
}


// ------------------------------
// [name] hq-is-string v1.0.0
// [path] /hisho-query/hq-is/_string.scss
// [desc] string判定
// [return] bool
// [exsample]
//   hq-is-string("aaaa");
// ------------------------------
@function hq-is-string($str){
	@return if(type-of($str) == string, true, false);
}


// ------------------------------
// [name] hq-is-number v1.0.0
// [path] /hisho-query/hq-is/_number.scss
// [desc] number判定
// [return] bool
// [exsample]
//   hq-is-number("aaaa");
// ------------------------------
@function hq-is-number($str){
	@return if(type-of($str) == number, true, false);
}


// ------------------------------
// [name] hq-is-color v1.0.0
// [path] /hisho-query/hq-is/_color.scss
// [desc] color判定
// [return] bool
// [exsample]
//   hq-is-color("aaaa");
// ------------------------------
@function hq-is-color($str){
	@return if(type-of($str) == color, true, false);
}


// ------------------------------
// [name] hq-is-map v1.0.0
// [path] /hisho-query/hq-is/_map.scss
// [desc] map判定
// [return] bool
// [exsample]
//   hq-is-map("aaaa");
// ------------------------------
@function hq-is-map($str){
	@return if(type-of($str) == map, true, false);
}


// ------------------------------
// [name] hq-is-list v1.0.0
// [path] /hisho-query/hq-is/_list.scss
// [desc] list判定
// [return] bool
// [exsample]
//   hq-is-list("aaaa");
// ------------------------------
@function hq-is-list($str){
	@return if(type-of($str) == list, true, false);
}


// ------------------------------
// [name] hq-is-bool v1.0.0
// [path] /hisho-query/hq-is/_bool.scss
// [desc] bool判定
// [return] bool
// [exsample]
//   hq-is-bool("aaaa");
// ------------------------------
@function hq-is-bool($str){
	@return if(type-of($str) == bool, true, false);
}


@charset "utf-8";
// ------------------------------
// [name] hq-mixin-font-cloud v1.0.0
// [path] /hisho-query/hq/_hq-mixin-font-cloud.scss
// [desc] 各種fontsize用class s,l,xl,xxl等を生成。map指定する事で任意の値を設定可能
// [exsample]
//
//   @include hq-mixin-font-cloud(12px);
//
//   @include hq-mixin-font-cloud(
//     xxs: 8px,
//     l: 18px
//   );
// ------------------------------

@mixin hq-mixin-font-cloud($size){
	$_baseSize: if(hq-is("map",$size) , hq-map("get", $size, m) , $size);

	$_sizeMap : (
		xxs : $_baseSize / 2,
		xs  : 2 * $_baseSize / 3,
		s   : 3 * $_baseSize / 4,
		m   : $_baseSize,
		l   : 4 * $_baseSize / 3,
		xl  : 3 * $_baseSize / 2,
		xxl : 2 * $_baseSize
	);
	//mapの場合extend
	@if hq-is("map",$size){
		$_sizeMap: hq-map("marge", $_sizeMap, $size);
	}

	@each $_k, $_v in $_sizeMap {
		&.#{$_k} {
			font-size : $_v;
		}
	}
}



@charset "utf-8";
// ------------------------------
// [name] hq-mixin-link-styles v1.0.0
// [path] /hisho-query/hq/_hq-mixin-link-styles.scss
// [desc] linkのcolorとunderlineを指定
// [exsample]
//
//   @include hq-mixin-link-styles($map);
//
//   @include hq-mixin-link-styles(
//     linkColor : #333,
//     linkUnderline : false
//   );
// ------------------------------

//private mixin
@mixin hq-mixin-link-styles-view($color:null, $underline:null){
	@if $color {
		color: $color;
	}
	@if $underline != null{
		text-decoration: if($underline, underline, none);
	}
}

//publick mixin
@mixin hq-mixin-link-styles($options){

	//-----------------
	// options
	//-----------------
	$options: hq-map("mergeDeep", (
		color: (
			default : #333,
			link    : #CC33CC,
			visited : #CC33CC,
			hover   : #CC33CC,
			active  : #CC33CC,
			focus   : #CC33CC
		),
		underline: (
			default : true,
			link    : true,
			visited : true,
			hover   : false,
			active  : false,
			focus   : false
		)
	), $options);
	
	//-----------------
	// view
	//-----------------
 
	@include hq-mixin-link-styles-view(
		$color     : hq-map("get",$options, "color.default"),
		$underline : hq-map("get",$options, "underline.default")
	);

	&:link{
		@include hq-mixin-link-styles-view(
			$color     : hq-map("get",$options, "color.link"),
			$underline : hq-map("get",$options, "underline.link")
		);
	}

	&:visited{
		@include hq-mixin-link-styles-view(
			$color     : hq-map("get",$options, "color.visited"),
			$underline : hq-map("get",$options, "underline.visited")
		);
	}

	&:hover{
		@include hq-mixin-link-styles-view(
			$color     : hq-map("get",$options, "color.hover"),
			$underline : hq-map("get",$options, "underline.hover")
		);
	}

	&:active{
		@include hq-mixin-link-styles-view(
			$color     : hq-map("get",$options, "color.active"),
			$underline : hq-map("get",$options, "underline.active")
		);
	}

	&:focus{
		@include hq-mixin-link-styles-view(
			$color     : hq-map("get",$options, "color.focus"),
			$underline : hq-map("get",$options, "underline.focus")
		);
	}

}



@charset "utf-8";
// ------------------------------
// [name] hq-mixin-module v1.0.0
// [path] /hisho/helper/mixin/_module.scss
// [desc] mapの指定を基にCSS生成
// [exsample]
//
//   @include hq-mixin-module($map);
// ------------------------------

//publick mixin
@mixin hq-mixin-module($options){

	//-----------------
	// options
	//-----------------
	$options: hq-map("mergeDeep", (
		name    : null,  //[str]moduleのClass名指定
		display : null,  //[int]moduleのdisplayを指定
		width   : auto,  //[int]moduleのwidth指定
		align   : null,  //[str]moduleのセンタリング位置を指定
		margin  : null,   //[int]moduleのmargin指定
		//style
		core: ()
	), $options);

	$_nameUp: hq-str("flUpcase", hq-map("get",$options,"name") );
	$_nameDw: hq-str("flDowncase", hq-map("get",$options,"name") );

	//-----------------
	// view
	//-----------------
	.#{$_nameUp}{
		@include hq-mixin-module-core($options);
		@include hq-mixin-write(hq-map("get", $options, "core"));

		@each $k,$v in $options{
			@if hq-is("map",$v) and $k != "core" {
				$key: hq-str("flUpcase", $k);
				.#{$_nameDw}#{$key}{
					@include hq-mixin-write($v);
				}
			}
		}
	}

}



@charset "utf-8";
// ------------------------------
// [name] hq-mixin-module-core v1.0.0
// [path] /hisho-query/hq/_hq-mixin-module-core.scss
// [desc] hishoModuleの基本styleを指定
// [exsample]
//
//   @include hq-mixin-module-core();
//
//   @include hq-mixin-module-core(
//     width : 500px,
//     align : center
//   );
// ------------------------------

//publick mixin
@mixin hq-mixin-module-core($options){

	//-----------------
	// options
	//-----------------
	$options: hq-map("merge", (
		display : null,
		width   : auto,
		align   : left,
		margin  : 0
	), $options);
	
	$_display : hq-map("get", $options, "display");
	$_width   : if(hq-map("get", $options, "width") == auto, null, hq-map("get", $options, "width"));
	$_align   : hq-map("get", $options, "align");
	$_margin  : hq-css("toMap", "margin", hq-map("get", $options, "margin") );
	
	//inlineBlockの場合
	@if $_width and $_display == "inline-block"{
		@include hq-mixin-write-propaty("text-align", $_align);

	}@else{
		//align center
		@if $_width and $_align == "center"{
			$_margin: hq-map("merge", $_margin, (
				right:  auto,
				left:   auto
			));
		
		//align right
		}@else if $_width and map-get($_options, align) == "right"{
			$_margin: hq-map("merge", $_margin, (
				right:  0,
				left:   auto
			));
		}
	}

	//-----------------
	// view
	//-----------------
	@include hq-mixin-write-propaty("display", $_display);
	@include hq-mixin-write-propaty("width", $_width);
	@include hq-mixin-write-propaty("margin", $_margin);

}



@charset "utf-8";
// ------------------------------
// [name] hq-mixin-sprite v1.0.0
// [path] /hisho/helper/_hq-mixin-sprite.scss
// [desc]
//   sprite生成
// [options]
//     spriteMap    : sprite-map指定
//     name         : 表示する画像のfile名指定。:区切りで複数指定する事でhover時のsprite指定可能
//     positionOnly : "all" or "position"
//     btn          : ボタンorリンクとして使用する場合true
//     hover        : hover時のstyle指定
// [exsample]
//   @include hq-mixin-sprite((spriteMap:$spriteMap, name:"list01:list01_hover"));
// ------------------------------
@mixin hq-mixin-sprite($options){

	$options: hq-map("mergeDeep",(
		spriteMap: null,
		name: null,
		positionOnly: false,
		btn: false,
		hover: null
	) ,$options);

	$_name: hq-map("get",$options,"name");

	//複数指定の場合,options変更
	@if hq-str("match", $_name, ":"){
		$_nameList: hq-str("split", $_name, ":");
		$_hoverPos: sprite-position(hq-map("get",$options,"spriteMap"), hq-list("get",$_nameList,2));
		$_newData: (
			name : hq-list("get", $_nameList, 1),
			hover: (
				background-position: $_hoverPos
			)
		);
		$options: hq-map("mergeDeep",$options,$_newData);
	}

	//実行
	@include hq-mixin-sprite-core($options);
	@include hq-mixin-sprite-image($options);
}



// ------------------------------
// [name] hq-mixin-sprite-core v1.0.0
// [path] /hisho-query/hq/hq-mixin-sprite-core.scss
// [desc]
//   spriteを指定する要素に指定。
//     btn    : ボタンorリンクとして使用する場合true
//     hover  : hover時のstyle指定
// [exsample]
//   @include hq-mixin-sprite-core((cursor:true));
// ------------------------------
@mixin hq-mixin-sprite-core($options){

	$options: hq-map("mergeDeep",(
		btn: false,
		hover: null
	) ,$options);
	
	//view
	@include inline-block();
	overflow:hidden;
	border:none;
	vertical-align:top;
	white-space: nowrap;
	text-indent: 100%;

	//text-indent:-126em;
	//white-space: nowrap;
	//*text-indent:0;
	//*line-height:9999px;
	//*word-wrap:normal;
	//*vertical-align:middle;
	
	//curor
	@if hq-map("get",$options,"btn"){
		cursor: pointer;
		&:hover{
			@include hq-mixin-write(hq-map("get",$options,"hover"));
		}
	}
	
}



// ------------------------------
// [name] hq-mixin-sprite-image v1.0.0
// [path] /hisho/helper/_hq-mixin-sprite-image.scss
// [desc]
//   spriteの画像表示用style生成
//     spriteMap    : sprite-map指定
//     name         : 表示する画像のfile名指定
//     positionOnly : "all" or "position"
// [exsample]
//   @include hq-mixin-sprite-image((spriteMap:$spriteMap, name:"list01"));
// ------------------------------
@mixin hq-mixin-sprite-image($options){
	
	$options: hq-map("mergeDeep",(
		spriteMap: null,
		name: null,
		positionOnly: false
	) ,$options);

	$_spriteMap: hq-map("get",$options, "spriteMap");
	$_name: hq-map("get",$options, "name");

	//view
	@if hq-map("get",$options, "positionOnly") != false {
		background-image: sprite-url($_spriteMap);
		background-repeat: no-repeat;
		height: image-height(sprite-file($_spriteMap, $_name));
		width: image-width(sprite-file($_spriteMap, $_name));
	}
	background-position: sprite-position($_spriteMap, $_name);
}



// ------------------------------
// [name] hq-mixin-write v1.0.0
// [path] /hisho-query/hq/_hq-mixin-write.scss
// [desc] mapに指定されたプロパティデータを全て反映
// [exsample]
//
//   @include hq-mixin-write(map);
// ------------------------------
@mixin hq-mixin-write($map){
	@if $map and hq-is-map($map) and length($map) != 0{
		@each $key, $value in $map {
			@include hq-mixin-write-propaty($key, $value);
		}
	}
}



// ------------------------------
// [name] hq-mixin-write-propaty v1.0.0
// [path] /hisho-query/hq/_hq-mixin-write-propaty.scss
// [desc] 指定内容を基にプロパティと値を生成
//        通常指定の場合はショートハンド、map指定の場合は複数プロパティで返す
// [exsample]
//   @include hq-mixin-write-propaty("border",solid 1px #ccc);
//
//   @include hq-mixin-write-propaty("border",(
//     style : solid,
//     width : 1px
//   ));
// ------------------------------

//
// publick mixin
// @ hq-mixin-write-propaty
//
@mixin hq-mixin-write-propaty($propaty, $value){
	//map指定
	@if hq-is-map($value) {

		//margin padding
		@if $propaty == "margin" or $propaty == "padding" {
			@include hq-mixin-write-propaty-map-margin($propaty, $value);
		
		//border
		}@else if $propaty == "border" {
			@include hq-mixin-write-propaty-map-border($propaty, $value);

		//background
		}@else if $propaty == "background" {
			@include hq-mixin-write-propaty-map-background($propaty, $value);

		//font
		}@else if $propaty == "font" {
			@include hq-mixin-write-propaty-map-font($propaty, $value);
		
		//box
		}@else if $propaty == "box" {
			@include hq-mixin-write-propaty-map-box($propaty, $value);

		//linkStyles mixin
		}@else if $propaty == "link-styles" {
			@if $value{
				@include hq-link-styles($value);
			}
			
		//default
		}@else{
			@include hq-mixin-write-propaty-map($propaty, $value);
		}

	//map以外の通常指定
	} @else {
		@include hq-mixin-write-propaty-value($propaty, $value);
	}
}


//
// private mixin
// @ hq-mixin-write-propaty-value
// - valueがmapでは無いときの処理
//
@mixin hq-mixin-write-propaty-value($propaty, $value){
	//valueがcompass対応mixinの場合
	//display:inline-block
	@if $propaty == "display" and $value == "inline-block"{
		@include inline-block;
	//display:box
	}@else if $propaty == "display" and $value == "box"{
		@include display-box;
	//display:box
	}@else if $propaty == "opacity"{
		@include opacity($value);
	//compass非対応
	}@else{
		#{$propaty} : $value;
	}
}


//
// private mixin
// @ hq-mixin-write-propaty-map
// - valueがmapの時のデフォルト処理
//
@mixin hq-mixin-write-propaty-map($propaty, $value){
	@each $key, $value in $value {
		#{$propaty}-#{$key}: $value;
	}
}


//
// private mixin
// @ hq-mixin-write-propaty-map-margin
// - margin,padding時、map指定で値が全て指定されている場合、ショートハンドに変換し生成。
//
@mixin hq-mixin-write-propaty-map-margin($propaty, $map){
	$_isNull: false;
	$map: hq-map("merge",(
		top: null,
		right: null,
		bottom: null,
		left: null
	) ,$map);

	//shorthandチェック
	$_short: hq-css-to-short($propaty, $map);
	
	//shortHand
	@if $_short {
		#{$propaty} : $_short;
	//map
	}@else{
		@include hq-mixin-write-propaty-map($propaty, $value);
	}
}

//
// private mixin
// @ hq-mixin-write-propaty-map-border
// - border時mapが複数構造ある場合対応
//
@mixin hq-mixin-write-propaty-map-border($propaty, $map){
	//shorthandチェック
	$_short: hq-css-to-short($propaty, $map);
	
	//shortHand
	@if $_short {
		#{$propaty} : $_short;
	//map
	}@else{
		@each $key, $value in $map {
			//border-radius
			@if $key == "radius"{
				@include border-radius($value);
			//border-image
			}@else if $key == "image"{
				@include border-image($value);
			//map内にshortHand
			}@else if $key == "all"{
				#{$propaty}: $value;
			//left->styleの様なdeep指定
			}@else if type-of($value) == map{
				@each $_k2, $_v2 in $value {
					#{$propaty}-#{$key}-#{$_k2}: $_v2;
				}
			//通常map
			}@else{
				#{$propaty}-#{$key}: $value;
			}
		}
	}
}

//
// private mixin
// @ hq-mixin-write-propaty-map-background
// - background時mapが複数構造ある場合対応
//
@mixin hq-mixin-write-propaty-map-background($propaty, $map){
	//shorthandチェック
	$_short: hq-css-to-short($propaty, $map);
	
	//shortHand
	@if $_short {
		#{$propaty} : $_short;
	//map
	}@else{
		@each $key, $value in $map {
			//background-clip
			@if $key == "clip"{
				@include background-clip($value);
			//background-origin
			}@else if $key == "origin"{
				@include background-origin($value);
			//background-size
			}@else if $key == "size"{
				@include background-size($value);
			//map内にshortHand
			}@else if $key == "all"{
				#{$propaty}: $value;
			//通常map
			}@else{
				#{$propaty}-#{$key}: $value;
			}
		}
	}
}

//
// private mixin
// @ hq-mixin-write-propaty-map-font
// - font時mapが複数構造ある場合対応
//
@mixin hq-mixin-write-propaty-map-font($propaty, $map){
	//shorthandチェック
	$_short: hq-css-to-short($propaty, $map);
	
	//shortHand
	@if $_short {
		#{$propaty} : $_short;
	//map
	}@else{
		@each $key, $value in $map {
			//line-height
			@if $key == "line-height"{
				line-height: $value;
			//map内にshortHand
			}@else if $key == "all"{
				#{$propaty}: $value;
			//通常map
			}@else{
				#{$propaty}-#{$key}: $value;
			}
		}
	}
}

//
// private mixin
// @ hq-mixin-write-propaty-map-box
// - box時mapが複数構造ある場合対応
//
@mixin hq-mixin-write-propaty-map-box($propaty, $map){
	@each $key, $value in $map {
		//box-shadow
		@if $key == "shadow"{
			@include box-shadow($value);
		//box-sizing
		}@else if $key == "sizing"{
			@include box-sizing($value);
		//box-flex
		}@else if $key == "flex"{
			@include box-flex($value);
		//box-flex-group
		}@else if $key == "flex-group"{
			@include box-flex-group($value);
		//box-orient
		}@else if $key == "orient"{
			@include box-orient($value);
		//box-orient-group
		}@else if $key == "orient-group"{
			@include box-orient-group($value);
		//box-align
		}@else if $key == "align"{
			@include box-align($value);
		//box-direction
		}@else if $key == "direction"{
			@include box-direction($value);
		//box-lines
		}@else if $key == "lines"{
			@include box-lines($value);
		//box-pack
		}@else if $key == "pack"{
			@include box-pack($value);
		//通常map
		}@else{
			#{$propaty}-#{$key}: $value;
		}
	}
}




// ==============================
// [name] hisho-query v0.1.1
// [path] /hisho-query/_hisho-query.scss
// [desc] function mixin ライブラリ
// ==============================

// ------------------------------
// #hq-function
// ------------------------------

@function hq($argument...){
	$_api: (
		str: (
			help      : 0 hq-str-help,
			unquote   : 1 unquote,
			quote     : 1 quote,
			length    : 1 str-length,
			insert    : 3 str-insert,
			index     : 2 str-index,
			slice     : 3 str-slice,
			upcase    : 1 to-upper-case,
			downcase  : 1 to-lower-case,
			capitalize: 1 hq-str-capitalize,
			flUpcase  : 1 hq-str-first-letter-upper-case,
			flDowncase: 1 hq-str-first-letter-lower-case,
			strip     : 1 hq-str-strip,
			succ      : 1 hq-str-succ,
			match     : 2 hq-str-match,
			replace   : 3 hq-str-replace,
			split     : 2 hq-str-split,
			puts      : 1 hq-str-puts,
			getId     : 1 unique-id,
			reverse   : 1 hq-str-reverse,
		),
		num: (
			help       : 0 hq-num-help,
			percentage : 1 percentage,
			per        : 1 percentage,
			round      : 1 round,
			ceil       : 1 ceil,
			floor      : 1 floor,
			abs        : 1 abs,
			min        : i min,
			max        : i max,
			unit       : 1 unit,
			unitless   : 1 unitless,
			comparable : 2 comparable,
		),
		list: (
			help     : 0 hq-list-help,
			nth      : 2 nth,
			get      : 2 nth,
			setNth   : 3 set-nth,
			set      : 3 set-nth,
			length   : 1 length,
			index    : 2 index,
			append   : 2 append,
			push     : 2 append,
			prepend  : 2 hq-list-prepend,
			unshift  : 2 hq-list-prepend,
			shift    : 1 hq-list-shift,
			pop      : 1 hq-list-pop,
			slice    : 3 hq-list-slice,
			remove   : 2 hq-list-remove,
			join     : 3 join,
			zip      : 1 zip,
			toSpace  : 1 hq-list-toSpace,
			toComma  : 1 hq-list-toComma,
			separator: 1 list-separator,
			reverse  : 1 hq-list-reverse,
		),
		map: (
			help      : 0 hq-map-help,
			get       : 2 hq-map-get-deep,
			set       : 3 hq-map-set-deep,
			extend    : i hq-map-extend,
			merge     : 2 map-merge,
			mergeDeep : 2 hq-map-merge-deep,
			keys      : 1 map-keys,
			values    : 1 map-values,
			hasKey    : 2 map-has-key,
			nth       : 2 nth,
			length    : 1 length,
			append    : 2 append,
			push      : 2 append,
			join      : 3 join,
			zip       : 1 zip,
			toString  : 1 hq-map-to-string,
		),
		is: (
			help       : 0 hq-is-help,
			globalValue: 1 global-variable-exists,
			gValue     : 1 global-variable-exists,
			function   : 1 function-exists,
			mixin      : 1 mixin-exists,
			string     : 1 hq-is-string,
			number     : 1 hq-is-number,
			color      : 1 hq-is-color,
			map        : 1 hq-is-map,
			list       : 1 hq-is-list,
			bool       : 1 hq-is-bool,
		),
		css: (
			help      : 0 hq-css-help,
			toMap     : 1 hq-css-to-map,
			toShort   : 1 hq-css-to-short,
			getWidth  : 3 hq-css-get-width,
			getHeight : 3 hq-css-get-height,
		)
	);
	
	$_query: nth($argument,1);
	$_qList: hq-str-split($_query,"->");
	$_arg: hq-list-slice($argument,2);
	$_result: null;

	@each $_name in $_qList{
		$_name: hq-str-strip($_name);
		$_data: hq-map-get-deep($_api, $_name);
		$_method: nth($_data,2);
		$_argNum: nth($_data,1);
		//error
		@if $_method == null{
			$_error: "    error hisho-query undefined　method '" + $_name + "'";
			$_puts: hq-str-puts($_error);
			$_result: $_error;
		//default
		}@else{
			$_setArg: hq-list-slice($_arg, 1, $_argNum);
			$_result: call($_method, $_setArg...);
		}
	}
	@return $_result;
}



// ------------------------------
// #string-function
//
$strHelp: '
- method -
[default] unquote   : hq-str("unquote", $str);
[default] quote     : hq-str("quote", $str);
[default] length    : hq-str("length", $str);
[default] insert    : hq-str("insert", $str, hoge, 3);
[default] index     : hq-str("index", $str, fg);
[default] slice     : hq-str("slice", $str, 1, 3);
[default] upcase    : hq-str("upcase", $str);
[default] downcase  : hq-str("lowerCase", $str);
[custom]  capitalize: hq-str("capitalize", $str);
[custom]  FlUpcase  : hq-str("flUpcase", $str);
[custom]  FlDowncase: hq-str("flDowncase", $str);
[custom]  strip     : hq-str("strip", $str);
[custom]  succ      : hq-str("succ", $str);
[custom]  match     : hq-str("match", $str, "bc");
[custom]  replace   : hq-str("replace", $str, "bc", "xa");
[custom]  split     : hq-str("split", $str, ".");
[custom]  puts      : hq-str("puts", $str);
[default] getId     : hq-str("getId"); //unique-id()
[custom]  reverse   : hq-str("reverse", $str);
[custom]  help      : hq-str("help");
';
// ------------------------------
@function hq-str($argument...){
	$_api: (
		unquote   : unquote,
		quote     : quote,
		length    : str-length,
		insert    : str-insert,
		index     : str-index,
		slice     : str-slice,
		upcase    : to-upper-case,
		downcase  : to-lower-case,
		capitalize: hq-str-capitalize,
		flUpcase  : hq-str-first-letter-upper-case,
		flDowncase: hq-str-first-letter-lower-case,
		strip     : hq-str-strip,
		succ      : hq-str-succ,
		match     : hq-str-match,
		replace   : hq-str-replace,
		split     : hq-str-split,
		puts      : hq-str-puts,
		getId     : unique-id,
		reverse   : hq-str-reverse
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($strHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-str no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #number-function
//
$numHelp: '
- method -
[default] percentage : hq-num("percentage", (100px / 50px) );
[default] round      : hq-num("round", 10.4px);
[default] ceil       : hq-num("ceil", 10.4px);
[default] floor      : hq-num("floor", 10.4px);
[default] abs        : hq-num("abs", -15px);
[default] min        : hq-num("min", 10px, 5px, 2px, 15px, 18px);
[default] max        : hq-num("max", 10px, 5px, 2px, 15px, 18px);
[default] unit       : hq-num("unit", 20em);
[default] unitless   : hq-num("unitless", 20em);
[default] comparable : hq-num("comparable", 15em, 15px);
';
// ------------------------------
@function hq-num($argument...){
	$_api: (
		percentage : percentage,
		per   : percentage,
		round : round,
		ceil  : ceil,
		floor : floor,
		abs   : abs,
		min   : min,
		max   : max,
		unit  : unit,
		unitless : unitless,
		comparable: comparable
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($numHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-num no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}


// ------------------------------
// #list-function
//
$listHelp: '
- method -
[default] get       : hq-list("get", $list, 1);
[default] length    : hq-list("length", $list);
[default] index     : hq-list("index", $list, e);
[default] push      : hq-list("push", $list, x);
[custom]  unshift   : hq-list("unshift", $list, x);
[custom]  shift     : hq-list("shift", $list, x);
[custom]  pop       : hq-list("pop", $list, x);
[custom]  slice     : hq-list("slice", $list, 3);
[custom]  remove    : hq-list("remove", $list, c);
[default] join      : hq-list("join", $list1, $list2, comma);
[default] zip       : hq-list("zip", $list);
[custom]  toSpace   : hq-list("toSpace", $list);
[custom]  toComma   : hq-list("toComma", $list);
[custom]  separator : hq-list("separator", $list);
[custom]  reverse   : hq-list("reverse", $list);
[custom]  help      : hq-list("help");
';
// ------------------------------
@function hq-list($argument...){
	$_api: (
		nth       : nth,
		get       : nth,
		setNth    : set-nth,
		set       : set-nth,
		length    : length,
		index     : index,
		append    : append,
		push      : append,
		prepend   : hq-list-prepend,
		unshift   : hq-list-prepend,
		shift     : hq-list-shift,
		pop       : hq-list-pop,
		slice     : hq-list-slice,
		remove    : hq-list-remove,
		join      : join,
		zip       : zip,
		toSpace   : hq-list-toSpace,
		toComma   : hq-list-toComma,
		separator : list-separator,
		reverse   : hq-list-reverse
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($listHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-list no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}


// ------------------------------
// #map-function
$mapHelp: '
- method -
[custom]  get       : hq-map("get", $map, "cat.colorType");
[custom]  set       : hq-map("set", $map, "cat.colorType", "blue");
[custom]  extend    : hq-map("extend", $map1, $map2);
[custom]  extend    : hq-map("extend", true, $map1, $map2);  //deepCopy
[default] merge     : hq-map("merge", $map1, $map2);         //deepMap×
[custom]  mergeDeep : hq-map("mergeDeep", $map1, $map2);
[default] keys      : hq-map("keys", $map);                  //deepMap×
[default] values    : hq-map("values", $map);                //deepMap×
[default] hasKey    : hq-map("hasKey", $map, "hoge");
[default] nth       : hq-map("nth", $map, 2);                //deepMap×
[default] length    : hq-map("length", $map);
[default] push      : hq-map("push", $map, foo hoge);
[default] join      : hq-map("join", $map3, $map4, comma);   //deepMap×
[default] zip       : hq-map("zip", $map);                   //deepMap×
[custom]  toString  : hq-map("toString", $map);
[custom]  help      : hq-map("help");
';
// ------------------------------
@function hq-map($argument...){
	$_api: (
		get       : hq-map-get-deep,
		set       : hq-map-set-deep,
		extend    : hq-map-extend,
		merge     : map-merge,
		mergeDeep : hq-map-merge-deep,
		keys      : map-keys,
		values    : map-values,
		hasKey    : map-has-key,
		nth       : nth,
		length    : length,
		index     : index,
		append    : append,
		push      : append,
		zip       : zip,
		join      : join,
		toString  : hq-map-to-string,
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($mapHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-map no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #is-function
$isHelp: '
- method -
[default] gValue   : hq-is("gValue", gvalue);
[default] function : hq-is("function", hq-is);
[default] mixin    : hq-is("mixin", hq);
[custom]  string   : hq-is("string", "border");
[custom]  number   : hq-is("number", 5px);
[custom]  color    : hq-is("color", #ff0000);
[custom]  map      : hq-is("map", $map);
[custom]  list     : hq-is("list", $list1);
[custom]  bool     : hq-is("bool", true);
[custom]  help     : hq-is("help");
';
// ------------------------------
@function hq-is($argument...){
	$_api: (
		//local変数の判別ができない為、非対応（function wrapが原因？）
		//value       : variable-exists,
		globalValue : global-variable-exists,
		gValue      : global-variable-exists,
		function    : function-exists,
		mixin       : mixin-exists,
		string      : hq-is-string,
		number      : hq-is-number,
		color       : hq-is-color,
		map         : hq-is-map,
		list        : hq-is-list,
		bool        : hq-is-bool
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);
	
	//help
	@if $_name == "help"{
		$test: hq-str-puts($isHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-is no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #css-function
$cssHelp: '
- method -
[custom]  toMap : hq-css("toMap", "border", solid 1px #ccc);
          -> shorthandで指定した値をmap形式に変換

[custom]  toMap : hq-css("toShort", $map);
          -> mapで指定した値をshorthand形式に変換

[custom]  getWidth  : hq-css("getWidth", 500px, solid 1px #ccc, 0 2px 3px);
          -> padding borderを省いたwidthを取得

[custom]  getHeight : hq-css("getHeight", 500px, solid 1px #ccc, 0 2px 3px);
          -> padding borderを省いたheightを取得
';
// ------------------------------
@function hq-css($argument...){
	$_api: (
		toMap     : hq-css-to-map,
		toShort   : hq-css-to-short,
		getWidth  : hq-css-get-width,
		getHeight : hq-css-get-height
	);
	
	$_name: nth($argument,1);
	$_method: hq-map-get-deep($_api, $_name);
	$_arg: hq-list-slice($argument,2);

	//help
	@if $_name == "help"{
		$test: hq-str-puts($cssHelp);
		@return null;
	//error
	}@else if $_method == null{
		$error: hq-str-puts("[error]hq-css no method '" + $_name + "'");
		@return null;
	//default
	}@else{
		@return call($_method, $_arg...);
	}
}

// ------------------------------
// #mixin
// @include hq("write", $map);
// @include hq("write.propaty", $map);
// @include hq("sprite", $options);
// @include hq("sprite.core", $options);
// @include hq("sprite.image", $options);
// @include hq("module", $map);
// @include hq("module.core", $map);
// @include hq("font.cloud", 12px);
// @include hq("link.style", $map);
// @include hq("help", $map);
// ------------------------------

@mixin hqm($argument...){
	$_name: nth($argument,1);
	$_arg: hq-list-slice($argument,2);
	
	@if $_name == "write"{
		@include hq-mixin-write($_arg...);

	}@else if $_name == "write.propaty"{
		@include hq-mixin-write-propaty($_arg...);

	}@else if $_name == "sprite"{
		@include hq-mixin-sprite($_arg...);

	}@else if $_name == "sprite.core"{
		@include hq-mixin-sprite-core($_arg...);

	}@else if $_name == "sprite.image"{
		@include hq-mixin-sprite-image($_arg...);

	}@else if $_name == "module"{
		@include hq-mixin-module($_arg...);

	}@else if $_name == "module.core"{
		@include hq-mixin-module-core($_arg...);

	}@else if $_name == "font.cloud"{
		@include hq-mixin-font-cloud($_arg...);

	}@else if $_name == "link.styles"{
		@include hq-mixin-link-styles($_arg...);

	}@else if $_name == "help"{
		@include hq-mixin-help($_arg...);
		$test: hq-str-puts($mixinHelp);
	}

}
