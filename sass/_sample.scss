@charset "utf-8";

@import "hisho-query/_hquery-0.1";


//--------------------------------
// hq-query-method
// hq-queryのmethod指定方法一覧
//--------------------------------
$str: "abcdefg.Hijklmn";

$help: hq("help");

.method-setting{

	/* 通常 */
	method-normal: hq("str.length", $str);

	/* method-query指定（引数なし） */
	method-query : hq("str.reverse -> str.quote", $str);
	
	/* method-query指定（引数有り） */
	method-query : hq("str.split -> list.get -> str.quote", $str, ".", 1);
	
	/* method-map */
	method-map   : hq($str,(
		"str.replace": "abcd" "dcbb",
		"str.quote": null
	));

}

//--------------------------------
// hq("str.xxx",$str)
// string method
//--------------------------------
$str: "abcdefg.Hijklmn";

.hq-str{
	help      : hq("str.help");
	unquote   : hq("str.unquote", $str);
	quote     : hq("str.quote", $str);
	length    : hq("str.length", $str);
	insert    : hq("str.insert", $str, hoge, 3);
	index     : hq("str.index", $str, fg);
	slice     : hq("str.slice", $str, 1, 3);
	upperCase : hq("str.upcase", $str);
	lowerCase : hq("str.downcase", $str);
	capitalize: hq("str.capitalize", $str);
	FlUpcase  : hq("str.flUpcase", $str);
	FlDowncase: hq("str.flDowncase", $str);
	strip     : hq("str.strip", $str);
	succ      : hq("str.succ", $str);
	match     : hq("str.match", $str, "bc");
	replace   : hq("str.replace", $str, "bc", "xa");
	split     : hq("str.split", $str, ".");
	getId     : hq("str.getId");
	reverse   : hq("str.reverse", $str);
}

//--------------------------------
// hq("num.xxx",$num)
// number method
//--------------------------------
.hq-num{
	help       : hq("num.help");
	percentage : hq("num.percentage", (100px / 50px) );
	round      : hq("num.round", 10.4px);
	ceil       : hq("num.ceil", 10.4px);
	floor      : hq("num.floor", 10.4px);
	abs        : hq("num.abs", -15px);
	min        : hq("num.min", 10px, 5px, 2px, 15px, 18px);
	max        : hq("num.max", 10px, 5px, 2px, 15px, 18px);
	unit       : hq("num.unit", 20em);
	unitless   : hq("num.unitless", 20em);
	comparable : hq("num.comparable", 15em, 15px);
}

//--------------------------------
// hq("list.xxx",$list)
// list method
//--------------------------------
$list: a b c d ;
$list2: e f g h i j k;

.hq-list{
	help     : hq("list.help");
	get      : hq("list.get", $list, 1);
	set      : hq("list.set", $list, 3, "hoge");
	length   : hq("list.length", $list);
	index    : hq("list.index", $list, "b");
	unshift  : hq("list.unshift", $list, "x");
	push     : hq("list.push", $list, "x");
	shift    : hq("list.shift", $list);
	pop      : hq("list.pop", $list);
	slice    : hq("list.slice", $list, 2, 3);
	remove   : hq("list.remove", $list, c);
	join     : hq("list.join", $list, $list2, "comma");
	zip      : hq("list.zip", $list, $list2, $list);
	toSpace  : hq("list.toSpace", $list);
	toComma  : hq("list.toComma", $list);
	separator  : hq("list.separator", $list);
	reverse  : hq("list.reverse", $list);
}

//--------------------------------
// hq("map.xxx",$map)
// map method
//--------------------------------
$map: (
	hoge: 2,
	fuga: e
);
$map2: (
	hoges: 20000,
	fugas: test
);


$mapd: (
	cat: (
		text: good,
		colorType: black
	),
	Lion: (
		text: bad,
		colorType: orange
	)
);

$mapd2: (
	Lion: (
		text: good,
		colorType: orange,
		option: (
			box: 2
		)
	),
	bird: (
		text: good,
		colorType: blue,
		option: (
			box: 1
		)
	)
);

.hq-map{
	help      : hq("map.help");
	get       : hq("map.get", $mapd, "cat.colorType");
	set       : hq("map.set -> map.toString", $mapd, "cat.colorType", "blue");
	extend    : hq("map.extend -> map.toString", $mapd, $mapd2);
	extend    : hq("map.extend -> map.toString", $mapd, $mapd2, true); //deepCopy
	merge     : hq("map.merge -> map.toString", $mapd, $mapd2);
	mergeDeep : hq("map.mergeDeep -> map.toString", $mapd, $mapd2);
	keys      : hq("map.keys", $map);
	values    : hq("map.values", $map);
	hasKey    : hq("map.hasKey", $map, "hoge");
	nth       : hq("map.nth", $map, 2);
	length    : hq("map.length", $mapd);
	push      : hq("map.push -> map.toString", $mapd, foo hoge);
	join      : hq("map.join", $map, $map2, comma);
	zip       : hq("map.zip", $map, $map2);
	toString  : hq("map.toString", $mapd);
}

//--------------------------------
// hq("is.xxx",$str)
// is method
//--------------------------------
$gvalue: test;
.hq-is{
	$fuga: hogehoge;
	help     : hq("is.help");
	gValue   : hq("is.gValue", gvalue);
	function : hq("is.function", hq-is);
	mixin    : hq("is.mixin", hq);
	string   : hq("is.string", "border");
	number   : hq("is.number", 5px);
	color    : hq("is.color", #ff0000);
	map      : hq("is.map", $map);
	list     : hq("is.list", $list);
	bool     : hq("is.bool", true);
}

//--------------------------------
// hq("css.xxx",$arg)
// css method
//--------------------------------
.hq-css{
	help      : hq("css.help");
	toMap     : hq("css.toMap -> map.toString", 0 2px 3px 4px, "margin");
	toMap     : hq("css.toMap -> map.toString", 0 2px, "padding");
	toMap     : hq("css.toMap -> map.toString", solid 1px #ccc, "border");
	toMap     : hq("css.toMap -> map.toString", dotted, "outline");
	toMap     : hq("css.toMap -> map.toString", url(../img.jpg) #ccc 0 50%, "background");
	toMap     : hq("css.toMap -> map.toString", 12px/1.5 bold, "font");
	toMap     : hq("css.toMap -> map.toString", url(../img.jpg) outside square, "list-style");

	toShort   : hq("css.toShort", (
					top: 8px,
					right: 2px,
					bottom: 7px,
					left: 2px
				), "margin");
	
	toShort   : hq("css.toShort", (
					top: 8px,
					right: 2px,
					bottom: 8px,
					left: 2px
				), "padding");

	toShort   : hq("css.toShort", (
					style: solid,
					width: 6px,
					color: #ccc
				), "border");

	toShort   : hq("css.toShort", (
					style: dotted,
					color: #ccc
				), "border");

	toShort   : hq("css.toShort", (
					image: url(../img/test.jpg),
					repeat: no-repeat,
					position: 0 0,
					color: #ccc
				), "background");

	toShort   : hq("css.toShort", (
					weight: bold,
					size: 12px,
					line-height: 1.5,
					family: "ＭＳ 明朝"
				), "font");
	
	toShort   : hq("css.toShort", (
					type:    square,
					image: url(../img/test.jpg),
					position: outside
				), "list-style");

	getWidth  : hq("css.getWidth", 500px, solid 1px #ccc, 0 2px 3px 4px);
	getHeight : hq("css.getHeight", 500px, solid 1px #ccc, 0 2px 3px 4px);
}
