@charset "UTF-8";
/*!
 * hisho-query v0.1.0
 * Sass3 and compass1 Library
 * http://query.hisho.com
 * 
 * Copyright 2014 shoyo kyo
 * Released under the MIT license
 * https://github.com/syouyou/hisho-query/blob/master/LICENSE
 * 
 * Date: 2014-02-04
 */
/*
@mixin hq($argument...){
	$_name: nth($argument,1);
	$_arg: hq-list-slice($argument,2);
	
	@if $_name == "write"{
		@include hq-wite($_arg...);

	}@else if $_name == "write.propaty"{
		@include hq-write-propaty($_arg...);

	}@else if $_name == "sprite"{
		@include hq-sprite($_arg...);

	}@else if $_name == "sprite.core"{
		@include hq-sprite-core($_arg...);

	}@else if $_name == "sprite.image"{
		@include hq-sprite-image($_arg...);

	}@else if $_name == "module"{
		@include hq-module($_arg...);

	}@else if $_name == "module.core"{
		@include hq-module-core($_arg...);

	}@else if $_name == "font.cloud"{
		@include hq-font-cloud($_arg...);

	}@else if $_name == "link.style"{
		@include hq-link-style($_arg...);

	}@else if $_name == "help"{
		@include hq-help($_arg...);
		$test: hq-str-puts($mixinHelp);
		@return null;
	}

}
*/
/* line 11, ../sass/sample.scss */
.hq-str {
  unquote: abcdefg.hijklmn;
  quote: "abcdefg.hijklmn";
  length: 15;
  insert: "abhogecdefg.hijklmn";
  index: 6;
  slice: "abc";
  upperCase: "ABCDEFG.HIJKLMN";
  lowerCase: "abcdefg.hijklmn";
  strip: abcdefg.hijklmn;
  succ: abcdefg.hijklmo;
  match: true;
  replace: axadefg.hijklmn;
  sprit: abcdefg, hijklmn;
  getId: uy04bt2x7;
}

/* line 34, ../sass/sample.scss */
.hq-num {
  percentage: 200%;
  round: 10px;
  ceil: 11px;
  floor: 10px;
  abs: 15px;
  min: 2px;
  max: 18px;
  unit: "em";
  unitless: false;
  comparable: false;
}

/* line 54, ../sass/sample.scss */
.hq-list {
  get: a;
  set: a b hoge d e f g h i j k;
  length: 11;
  index: 5;
  push: a b c d e f g h i j k x;
  unshift: x a b c d e f g h i j k;
  shift: b c d e f g h i j k;
  pop: a b c d e f g h i j;
  slice: c d e f g h i j k;
  remove: a b d e f g h i j k;
  join: a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r;
  zip: a, b, c, d, e, f, g, h, i, j, k;
  toSpace: a b c d e f g h i j k;
  toComma: a, b, c, d, e, f, g, h, i, j, k;
  separator: space;
  reverse: k j i h g f e d c b a;
}

/* line 120, ../sass/sample.scss */
.hq-map {
  get: black;
  set: {"cat"=>"blue", "Lion"=>(text: bad, colorType: orange, count: 5)};
  extend: {"cat"=>(text: good, colorType: black, count: 3), "Lion"=>(text: good, colorType: orange, count: 20, option: ((box: 2))), "bird"=>(text: good, colorType: blue, count: 20, option: ((box: 1)))};
  extend: {"cat"=>(text: good, colorType: black, count: 3), "Lion"=>(text: good, colorType: orange, count: 20, option: ((box: 2))), "bird"=>(text: good, colorType: blue, count: 20, option: ((box: 1)))};
  merge: {"cat"=>(text: good, colorType: black, count: 3), "Lion"=>(text: good, colorType: orange, count: 20, option: ((box: 2))), "bird"=>(text: good, colorType: blue, count: 20, option: ((box: 1)))};
  mergeDeep: {"cat"=>(text: good, colorType: black, count: 3), "Lion"=>(text: good, colorType: orange, count: 20, option: ((box: 2))), "bird"=>(text: good, colorType: blue, count: 20, option: ((box: 1)))};
  keys: hoge, fuga;
  values: 2, e;
  hasKey: true;
  nth: fuga e;
  length: 2;
  push: {"cat"=>(text: good, colorType: black, count: 3), "Lion"=>(text: bad, colorType: orange, count: 5), "foo"=>"hoge"};
  join: hoge 2, fuga e, hoges 20000, fugas testtests;
  zip: hoge 2, fuga e;
  toString: {"cat"=>(text: good, colorType: black, count: 3), "Lion"=>(text: bad, colorType: orange, count: 5)};
}

/* line 143, ../sass/sample.scss */
.hq-is {
  gValue: true;
  function: true;
  mixin: false;
  string: true;
  number: true;
  color: true;
  map: true;
  list: true;
  bool: true;
}

/* line 160, ../sass/sample.scss */
.hq-css {
  toMap: {"top"=>0, "right"=>2px, "bottom"=>3px, "left"=>4px};
  toMap: {"top"=>0, "right"=>2px, "bottom"=>0, "left"=>2px};
  toMap: {"style"=>"solid", "width"=>1px, "color"=>#cccccc};
  toMap: {"style"=>"dotted", "width"=>null, "color"=>null};
  toMap: {"color"=>#cccccc, "image"=>"url(../img.jpg)", "repeat"=>null, "attachment"=>null, "position"=>(0 50%)};
  toMap: {"size"=>8px, "line-height"=>null, "style"=>null, "variant"=>null, "weight"=>"bold", "family"=>null};
  toMap: {"type"=>"square", "image"=>"url(../img.jpg)", "position"=>"outside"};
  toShort: 8px 2px 7px;
  toShort: 8px 2px;
  toShort: solid 6px #cccccc;
  toShort: dotted #cccccc;
  toShort: url(../img/test.jpg) no-repeat 0 0 #cccccc;
  toShort: bold "12px/1.5" "ＭＳ 明朝";
  toShort: url(../img/test.jpg) square outside;
  getWidth: 492px;
  getHeight: 495px;
}
